
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>comment</key>
  <string>
  TODO: unresolved issues

  text:
  "p &lt;&lt; end
  print me!
  end"
  symptoms:
  not recognized as a heredoc
  solution:
  there is no way to distinguish perfectly between the &lt;&lt; operator and the start
  of a heredoc. Currently, we require assignment to recognize a heredoc. More
  refinement is possible.
  • Heredocs with indented terminators (&lt;&lt;-) are always distinguishable, however.
  • Nested heredocs are not really supportable at present

  text:
  print &lt;&lt;-'THERE'
  This is single quoted.
  The above used #{Time.now}
  THERE
  symtoms:
  From Programming Ruby p306; should be a non-interpolated heredoc.

  text:
  "a\332a"
  symptoms:
  '\332' is not recognized as slash3.. which should be octal 332.
  solution:
  plain regexp.. should be easy.

    text:
    val?(a):p(b)
    val?'a':'b'
    symptoms:
    ':p' is recognized as a symbol.. its 2 things ':' and 'p'.
    :'b' has same problem.
    solution:
    ternary operator rule, precedOence stuff, symbol rule.
    but also consider 'a.b?(:c)' ??
</string>
  <key>fileTypes</key>
  <array>
    <string>rb</string>
    <string>rbx</string>
    <string>rjs</string>
    <string>Rakefile</string>
    <string>rake</string>
    <string>cgi</string>
    <string>fcgi</string>
    <string>gemspec</string>
    <string>irbrc</string>
    <string>capfile</string>
    <string>ru</string>
    <string>prawn</string>
    <string>jbuilder</string>
    <string>Gemfile</string>
    <string>Guardfile</string>
    <string>Vagrantfile</string>
  </array>
  <key>firstLineMatch</key>
  <string>^#!/.*\bruby</string>
  <key>foldingStartMarker</key>
  <string>(?x)^
      (\s*+
          (module|class|def(?!.*\bend\s*$)
          |unless|if
          |case
          |begin
          |for|while|until
           |^=begin
          |(  "(\\.|[^"])*+"          # eat a double quoted string
           | '(\\.|[^'])*+'        # eat a single quoted string
           |   [^#"']                # eat all but comments and strings
           )*
           (                        \s   (do|begin|case)
           | (?&lt;!\$)[-+=&amp;|*/~%^&lt;&gt;~] \s*+ (if|unless)
           )
          )\b
          (?! [^;]*+ ; .*? \bend\b )
      |(  "(\\.|[^"])*+"              # eat a double quoted string
       | '(\\.|[^'])*+'            # eat a single quoted string
       |   [^#"']                    # eat all but comments and strings
       )*
       ( \{ (?!  [^}]*+ \} )
       | \[ (?! [^\]]*+ \] )
       )
      ).*$
  |   [#] .*? \(fold\) \s*+ $         # Sune’s special marker
  </string>
  <key>foldingStopMarker</key>
  <string>(?x)
    (   (^|;) \s*+ end   \s*+ ([#].*)? $
    |   (^|;) \s*+ end \. .* $
    |   ^     \s*+ [}\]] ,? \s*+ ([#].*)? $
    |   [#] .*? \(end\) \s*+ $    # Sune’s special marker
    |   ^=end
    )</string>
  <key>keyEquivalent</key>
  <string>^~R</string>
  <key>name</key>
  <string>Ruby</string>
  <key>patterns</key>
  <array>
    <dict>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.control.class.ruby</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>entity.name.type.class.ruby</string>
        </dict>
        <key>4</key>
        <dict>
          <key>name</key>
          <string>entity.other.inherited-class.ruby</string>
        </dict>
        <key>5</key>
        <dict>
          <key>name</key>
          <string>punctuation.separator.inheritance.ruby</string>
        </dict>
        <key>6</key>
        <dict>
          <key>patterns</key>
          <array>
            <dict>
              <key>match</key>
              <string>\b(self)(?=($|\s))</string>
              <key>name</key>
              <string>variable.language.self.ruby</string>
            </dict>
            <dict>
              <key>match</key>
              <string>(&lt;&lt;)</string>
              <key>name</key>
              <string>keyword.operator.assignment.augmented.ruby</string>
            </dict>
            <dict>
              <key>match</key>
              <string>(\S+)</string>
              <key>name</key>
              <string>variable.other.object.ruby</string>
            </dict>
          </array>
        </dict>
        <key>7</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.variable.ruby</string>
        </dict>
      </dict>
      <key>match</key>
      <string>^\s*(class)\s+(([.a-zA-Z0-9_:]+(\s*(&lt;)\s*[.a-zA-Z0-9_:]+)?)|((&lt;&lt;)\s*[.a-zA-Z0-9_:]+))</string>
      <key>name</key>
      <string>meta.class.ruby</string>
    </dict>
    <dict>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.control.module.ruby</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>entity.name.type.module.ruby</string>
        </dict>
        <key>3</key>
        <dict>
          <key>name</key>
          <string>entity.other.inherited-class.module.first.ruby</string>
        </dict>
        <key>4</key>
        <dict>
          <key>name</key>
          <string>punctuation.separator.inheritance.ruby</string>
        </dict>
        <key>5</key>
        <dict>
          <key>name</key>
          <string>entity.other.inherited-class.module.second.ruby</string>
        </dict>
        <key>6</key>
        <dict>
          <key>name</key>
          <string>punctuation.separator.inheritance.ruby</string>
        </dict>
        <key>7</key>
        <dict>
          <key>name</key>
          <string>entity.other.inherited-class.module.third.ruby</string>
        </dict>
        <key>8</key>
        <dict>
          <key>name</key>
          <string>punctuation.separator.inheritance.ruby</string>
        </dict>
      </dict>
      <key>match</key>
      <string>^\s*(module)\s+(([A-Z]\w*(::))?([A-Z]\w*(::))?([A-Z]\w*(::))*[A-Z]\w*)</string>
      <key>name</key>
      <string>meta.module.ruby</string>
    </dict>
    <dict>
      <key>comment</key>
      <string>else if is a common mistake carried over from other languages. it works if you put in a second end, but it’s never what you want.</string>
      <key>match</key>
      <string>(?&lt;!\.)\belse(\s)+if\b</string>
      <key>name</key>
      <string>invalid.deprecated.ruby</string>
    </dict>
    <dict>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.constant.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>symbols as hash key (1.9 syntax)</string>
      <key>match</key>
      <string>(?&gt;[a-zA-Z_]\w*(?&gt;[?!])?)(:)(?!:)</string>
      <key>name</key>
      <string>constant.language.symbol.hashkey.ruby</string>
    </dict>
    <dict>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.constant.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>symbols as hash key (1.8 syntax)</string>
      <key>match</key>
      <string>(?&lt;!:)(:)(?&gt;[a-zA-Z_]\w*(?&gt;[?!])?)(?=\s*=&gt;)</string>
      <key>name</key>
      <string>constant.language.symbol.hashkey.ruby</string>
    </dict>
    <dict>
      <key>comment</key>
      <string>everything being a reserved word, not a value and needing a 'end' is a..</string>
      <key>match</key>
      <string>(?&lt;!\.)\b(BEGIN|begin|case|class|else|elsif|END|end|ensure|for|if|in|module|rescue|then|unless|until|when|while)\b(?![?!])</string>
      <key>name</key>
      <string>keyword.control.ruby</string>
    </dict>
    <dict>
      <key>comment</key>
      <string>contextual smart pair support for block parameters</string>
      <key>match</key>
      <string>(?&lt;!\.)\bdo\b\s*</string>
      <key>name</key>
      <string>keyword.control.start-block.ruby</string>
    </dict>
    <dict>
      <key>comment</key>
      <string>contextual smart pair support</string>
      <key>match</key>
      <string>(?&lt;=\{)(\s+)</string>
      <key>name</key>
      <string>meta.syntax.ruby.start-block</string>
    </dict>
    <dict>
      <key>comment</key>
      <string> as above, just doesn't need a 'end' and does a logic operation</string>
      <key>match</key>
      <string>(?&lt;!\.)\b(and|not|or)\b</string>
      <key>name</key>
      <string>keyword.operator.logical.ruby</string>
    </dict>
    <dict>
      <key>comment</key>
      <string> just as above but being not a logical operation</string>
      <key>match</key>
      <string>(?&lt;!\.)\b(alias|alias_method|break|next|redo|retry|return|super|undef|yield)\b(?![?!])|\bdefined\?|\bblock_given\?</string>
      <key>name</key>
      <string>keyword.control.pseudo-method.ruby</string>
    </dict>
    <dict>
      <key>match</key>
      <string>\b(nil|true|false)\b(?![?!])</string>
      <key>name</key>
      <string>constant.language.ruby</string>
    </dict>
    <dict>
      <key>match</key>
      <string>\b(__(FILE|LINE)__|self)\b(?![?!])</string>
      <key>name</key>
      <string>variable.language.ruby</string>
    </dict>
    <dict>
      <key>comment</key>
      <string> everything being a method but having a special function is a..</string>
      <key>match</key>
      <string>\b(initialize|new|loop|include|extend|prepend|raise|attr_reader|attr_writer|attr_accessor|attr|catch|throw|private|module_function|public|protected)\b(?![?!])</string>
      <key>name</key>
      <string>keyword.other.special-method.ruby</string>
    </dict>
    <dict>
      <key>begin</key>
      <string>\b(require|require_relative|gem|import|java_import)\b</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.ruby</string>
        </dict>
      </dict>
      <key>end</key>
      <string>$|(?=#|\})</string>
      <key>name</key>
      <string>meta.require.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>$self</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.variable.ruby</string>
        </dict>
      </dict>
      <key>match</key>
      <string>(@)[a-zA-Z_]\w*</string>
      <key>name</key>
      <string>variable.other.readwrite.instance.ruby</string>
    </dict>
    <dict>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.variable.ruby</string>
        </dict>
      </dict>
      <key>match</key>
      <string>(@@)[a-zA-Z_]\w*</string>
      <key>name</key>
      <string>variable.other.readwrite.class.ruby</string>
    </dict>
    <dict>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.variable.ruby</string>
        </dict>
      </dict>
      <key>match</key>
      <string>(\$)[a-zA-Z_]\w*</string>
      <key>name</key>
      <string>variable.other.readwrite.global.ruby</string>
    </dict>
    <dict>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.variable.ruby</string>
        </dict>
      </dict>
      <key>match</key>
      <string>(\$)(!|@|&amp;|`|'|\+|\d+|~|=|/|\\|,|;|\.|&lt;|&gt;|_|\*|\$|\?|:|"|-[0adFiIlpv])</string>
      <key>name</key>
      <string>variable.other.readwrite.global.pre-defined.ruby</string>
    </dict>
    <dict>
      <key>begin</key>
      <string>\b(ENV)\[</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>variable.other.constant.ruby</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\]</string>
      <key>name</key>
      <string>meta.environment-variable.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>$self</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>match</key>
      <string>\b[A-Z]\w*(?=((\.|::)[A-Za-z]|\[))</string>
      <key>name</key>
      <string>support.class.ruby</string>
    </dict>
    <dict>
      <key>match</key>
      <string>\b[A-Z]\w*\b</string>
      <key>name</key>
      <string>variable.other.constant.ruby</string>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?x)
               (?=def\b)                                                      # an optimization to help Oniguruma fail fast
               (?&lt;=^|\s)(def)\s+                                              # the def keyword
               ( (?&gt;[a-zA-Z_]\w*(?&gt;\.|::))?                                   # a method name prefix
                 (?&gt;[a-zA-Z_]\w*(?&gt;[?!]|=(?!&gt;))?                              # the method name
                 |===?|&gt;[&gt;=]?|&lt;=&gt;|&lt;[&lt;=]?|[%&amp;`/\|]|\*\*?|=?~|[-+]@?|\[\]=?) )  # …or an operator method
               \s*(\()                                                        # the openning parenthesis for arguments
              </string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.control.def.ruby</string>
        </dict>
        <key>2</key>
        <dict>
          <key>patterns</key>
          <array>
            <dict>
              <key>comment</key>
              <string>self keyword followed by (.|::)</string>
              <key>begin</key>
              <string>\b(self)(?=((\.|\s*::\s*)\w+))</string>
              <key>end</key>
              <string>(\.|\s*::\s*)(?=(\w+))</string>
              <key>beginCaptures</key>
              <dict>
                <key>0</key>
                <dict>
                  <key>name</key>
                  <string>variable.language.self.ruby</string>
                </dict>
              </dict>
              <key>endCaptures</key>
              <dict>
                <key>0</key>
                <dict>
                  <key>name</key>
                  <string>punctuation.seperator.method.ruby</string>
                </dict>
              </dict>
            </dict>
            <dict>
              <key>comment</key>
              <string>function name (.|::) function name</string>
              <key>begin</key>
              <string>\b(\w+)(?=((\.|\s*::\s*)\w))</string>
              <key>end</key>
              <string>(\.|\s*::\s*)(?=(\w))</string>
              <key>beginCaptures</key>
              <dict>
                <key>0</key>
                <dict>
                  <key>name</key>
                  <string>entity.name.function.ruby</string>
                </dict>
              </dict>
              <key>endCaptures</key>
              <dict>
                <key>0</key>
                <dict>
                  <key>name</key>
                  <string>punctuation.seperator.method.ruby</string>
                </dict>
              </dict>
            </dict>
            <dict>
              <key>comment</key>
              <string>initialize</string>
              <key>begin</key>
              <string>\b(initialize)(?=((;)|($)|(\s+)|(\w+)|(\()))</string>
              <key>end</key>
              <string>(\s+\w+)*(?=((;)|($)|(\s+)|(,)|(\()))</string>
              <key>beginCaptures</key>
              <dict>
                <key>0</key>
                <dict>
                  <key>name</key>
                  <string>entity.name.function.special.ruby</string>
                </dict>
              </dict>
              <key>endCaptures</key>
              <dict>
                <key>0</key>
                <dict>
                  <key>name</key>
                  <string>variable.parameter.function.ruby</string>
                </dict>
              </dict>
            </dict>
            <dict>
              <key>comment</key>
              <string>attempt to catch rest cases</string>
              <key>match</key>
              <string>(\w+)</string>
              <key>name</key>
              <string>entity.name.function.ruby</string>
            </dict>
          </array>
        </dict>
        <key>3</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.parameters.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>the method pattern comes from the symbol pattern, see there for a explaination</string>
      <key>contentName</key>
      <string>variable.parameter.function.ruby</string>
      <key>end</key>
      <string>\)</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.parameters.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>meta.function.method.with-arguments.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>(?![\s,)])</string>
          <key>end</key>
          <string>(?=[,)])</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>captures</key>
              <dict>
                <key>1</key>
                <dict>
                  <key>name</key>
                  <string>storage.type.variable.ruby</string>
                </dict>
                <key>2</key>
                <dict>
                  <key>name</key>
                  <string>variable.parameter.function.ruby</string>
                </dict>
              </dict>
              <key>match</key>
              <string>\G([&amp;*]?)([_a-zA-Z][_a-zA-Z0-9]*)</string>
            </dict>
            <dict>
              <key>include</key>
              <string>$self</string>
            </dict>
          </array>
          <key>name</key>
          <string>punctuation.seperator.object.ruby</string>
          <key>match</key>
          <string>(,)</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?x)
               (?=def\b)                                                      # an optimization to help Oniguruma fail fast
               (?&lt;=^|\s)(def)\s+                                              # the def keyword
               ( (?&gt;[a-zA-Z_]\w*(?&gt;\.|::))?                                   # a method name prefix
                 (?&gt;[a-zA-Z_]\w*(?&gt;[?!]|=(?!&gt;))?                              # the method name
                 |===?|&gt;[&gt;=]?|&lt;=&gt;|&lt;[&lt;=]?|[%&amp;`/\|]|\*\*?|=?~|[-+]@?|\[\]=?) )  # …or an operator method
               [ \t]                                                          # the space separating the arguments
               (?=[ \t]*[^\s#;])                                              # make sure arguments and not a comment follow
              </string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.control.def.ruby</string>
        </dict>
        <key>2</key>
        <dict>
          <key>patterns</key>
          <array>
            <dict>
              <key>comment</key>
              <string>self keyword followed by (.|::)</string>
              <key>begin</key>
              <string>\b(self)(?=((\.|\s*::\s*)\w+))</string>
              <key>end</key>
              <string>(\.|\s*::\s*)(?=(\w+))</string>
              <key>beginCaptures</key>
              <dict>
                <key>0</key>
                <dict>
                  <key>name</key>
                  <string>variable.language.self.ruby</string>
                </dict>
              </dict>
              <key>endCaptures</key>
              <dict>
                <key>0</key>
                <dict>
                  <key>name</key>
                  <string>punctuation.seperator.method.ruby</string>
                </dict>
              </dict>
            </dict>
            <dict>
              <key>comment</key>
              <string>function name (.|::) function name</string>
              <key>begin</key>
              <string>\b(\w+)(?=((\.|\s*::\s*)\w))</string>
              <key>end</key>
              <string>(\.|\s*::\s*)(?=(\w))</string>
              <key>beginCaptures</key>
              <dict>
                <key>0</key>
                <dict>
                  <key>name</key>
                  <string>entity.name.function.ruby</string>
                </dict>
              </dict>
              <key>endCaptures</key>
              <dict>
                <key>0</key>
                <dict>
                  <key>name</key>
                  <string>punctuation.seperator.method.ruby</string>
                </dict>
              </dict>
            </dict>
            <dict>
              <key>comment</key>
              <string>initialize</string>
              <key>begin</key>
              <string>\b(initialize)(?=((;)|($)|(\s+)|(\w+)|(\()))</string>
              <key>end</key>
              <string>(\s+\w+)*(?=((;)|($)|(\s+)|(,)|(\()))</string>
              <key>beginCaptures</key>
              <dict>
                <key>0</key>
                <dict>
                  <key>name</key>
                  <string>entity.name.function.special.ruby</string>
                </dict>
              </dict>
              <key>endCaptures</key>
              <dict>
                <key>0</key>
                <dict>
                  <key>name</key>
                  <string>variable.parameter.function.ruby</string>
                </dict>
              </dict>
            </dict>
            <dict>
              <key>comment</key>
              <string>attempt to catch rest cases</string>
              <key>match</key>
              <string>(\w+)</string>
              <key>name</key>
              <string>entity.name.function.ruby</string>
            </dict>
          </array>
        </dict>
      </dict>
      <key>comment</key>
      <string>same as the previous rule, but without parentheses around the arguments</string>
      <key>contentName</key>
      <string>variable.parameter.function.ruby</string>
      <key>end</key>
      <string>$</string>
      <key>name</key>
      <string>meta.function.method.with-arguments.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>(?![\s,])</string>
          <key>end</key>
          <string>(,|$)</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.seperator.object.ruby</string>
            </dict>
          </dict>
          <key>patterns</key>
          <array>
            <dict>
              <key>captures</key>
              <dict>
                <key>1</key>
                <dict>
                  <key>name</key>
                  <string>punctuation.definition.variable.ruby</string>
                </dict>
              </dict>
              <key>match</key>
              <string>\G([&amp;*]?)[_a-zA-Z][_a-zA-Z0-9]*</string>
              <key>name</key>
              <string>variable.parameter.function.ruby</string>
            </dict>
            <dict>
              <key>include</key>
              <string>$self</string>
            </dict>
          </array>
        </dict>
      </array>
    </dict>
    <dict>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.control.def.ruby</string>
        </dict>
        <key>3</key>
        <dict>
          <key>patterns</key>
          <array>
            <dict>
              <key>comment</key>
              <string>self keyword followed by (.|::)</string>
              <key>begin</key>
              <string>\b(self)(?=((\.|\s*::\s*)\w+))</string>
              <key>end</key>
              <string>(\.|\s*::\s*)(?=(\w+))</string>
              <key>beginCaptures</key>
              <dict>
                <key>0</key>
                <dict>
                  <key>name</key>
                  <string>variable.language.self.ruby</string>
                </dict>
              </dict>
              <key>endCaptures</key>
              <dict>
                <key>0</key>
                <dict>
                  <key>name</key>
                  <string>punctuation.seperator.method.ruby</string>
                </dict>
              </dict>
            </dict>
            <dict>
              <key>comment</key>
              <string>function name (.|::) function name</string>
              <key>begin</key>
              <string>\b(\w+)(?=((\.|\s*::\s*)\w))</string>
              <key>end</key>
              <string>(\.|\s*::\s*)(?=(\w))</string>
              <key>beginCaptures</key>
              <dict>
                <key>0</key>
                <dict>
                  <key>name</key>
                  <string>entity.name.function.ruby</string>
                </dict>
              </dict>
              <key>endCaptures</key>
              <dict>
                <key>0</key>
                <dict>
                  <key>name</key>
                  <string>punctuation.seperator.method.ruby</string>
                </dict>
              </dict>
            </dict>
            <dict>
              <key>comment</key>
              <string>initialize</string>
              <key>begin</key>
              <string>\b(initialize)(?=((;)|($)|(\s+)|(\w+)|(\()))</string>
              <key>end</key>
              <string>(\s+\w+)*(?=((;)|($)|(\s+)|(,)|(\()))</string>
              <key>beginCaptures</key>
              <dict>
                <key>0</key>
                <dict>
                  <key>name</key>
                  <string>entity.name.function.special.ruby</string>
                </dict>
              </dict>
              <key>endCaptures</key>
              <dict>
                <key>0</key>
                <dict>
                  <key>name</key>
                  <string>variable.parameter.function.ruby</string>
                </dict>
              </dict>
            </dict>
            <dict>
              <key>comment</key>
              <string>attempt to catch rest cases</string>
              <key>match</key>
              <string>(\w+)</string>
              <key>name</key>
              <string>entity.name.function.ruby</string>
            </dict>
          </array>
        </dict>
      </dict>
      <key>comment</key>
      <string> the optional name is just to catch the def also without a method-name</string>
      <key>match</key>
      <string>(?x)
               (?=def\b)                                                           # an optimization to help Oniguruma fail fast
               (?&lt;=^|\s)(def)\b                                                    # the def keyword
               ( \s+                                                               # an optional group of whitespace followed by…
                 ( (?&gt;[a-zA-Z_]\w*(?&gt;\.|::))?                                      # a method name prefix
                   (?&gt;[a-zA-Z_]\w*(?&gt;[?!]|=(?!&gt;))?                                 # the method name
                   |===?|&gt;[&gt;=]?|&lt;=&gt;|&lt;[&lt;=]?|[%&amp;`/\|]|\*\*?|=?~|[-+]@?|\[\]=?) ) )?  # …or an operator method
              </string>
      <key>name</key>
      <string>meta.function.method.without-arguments.ruby</string>
    </dict>
    <dict>
      <key>match</key>
      <string>\b(0[xX]\h(?&gt;_?\h)*|\d(?&gt;_?\d)*(\.(?![^[:space:][:digit:]])(?&gt;_?\d)*)?([eE][-+]?\d(?&gt;_?\d)*)?|0[bB][01]+)\b</string>
      <key>name</key>
      <string>constant.numeric.ruby</string>
    </dict>
    <dict>
      <key>begin</key>
      <string>:'</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.constant.ruby</string>
        </dict>
      </dict>
      <key>end</key>
      <string>'</string>
      <key>name</key>
      <string>constant.language.symbol.single-quoted.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>\\['\\]</string>
          <key>name</key>
          <string>constant.character.escape.ruby</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>:"</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.constant.ruby</string>
        </dict>
      </dict>
      <key>end</key>
      <string>"</string>
      <key>name</key>
      <string>constant.language.symbol.double-quoted.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>comment</key>
      <string>Needs higher precidence than regular expressions.</string>
      <key>match</key>
      <string>(?&lt;!\()/=</string>
      <key>name</key>
      <string>keyword.operator.assignment.augmented.ruby</string>
    </dict>
    <dict>
      <key>begin</key>
      <string>'</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>single quoted string (does not allow interpolation)</string>
      <key>end</key>
      <string>'</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.quoted.single.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>\\'|\\\\</string>
          <key>name</key>
          <string>constant.character.escape.ruby</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>"</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>double quoted string (allows for interpolation)</string>
      <key>end</key>
      <string>"</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.quoted.double.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>`</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>execute string (allows for interpolation)</string>
      <key>end</key>
      <string>`</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.interpolated.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%x\{</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>execute string (allow for interpolation)</string>
      <key>end</key>
      <string>\}</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.interpolated.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_curly_i</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%x\[</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>execute string (allow for interpolation)</string>
      <key>end</key>
      <string>\]</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.interpolated.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_brackets_i</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%x\&lt;</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>execute string (allow for interpolation)</string>
      <key>end</key>
      <string>\&gt;</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.interpolated.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_ltgt_i</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%x\(</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>execute string (allow for interpolation)</string>
      <key>end</key>
      <string>\)</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.interpolated.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_parens_i</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%x([^\w])</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>execute string (allow for interpolation)</string>
      <key>end</key>
      <string>\1</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.interpolated.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?x)
         (?:
           ^                      # beginning of line
         | (?&lt;=                   # or look-behind on:
             [=&gt;~(?:\[,|&amp;;]
           | [\s;]if\s      # keywords
           | [\s;]elsif\s
           | [\s;]while\s
           | [\s;]unless\s
           | [\s;]when\s
           | [\s;]assert_match\s
           | [\s;]or\s      # boolean opperators
           | [\s;]and\s
           | [\s;]not\s
           | [\s.]index\s     # methods
           | [\s.]scan\s
           | [\s.]sub\s
           | [\s.]sub!\s
           | [\s.]gsub\s
           | [\s.]gsub!\s
           | [\s.]match\s
           )
         | (?&lt;=                  # or a look-behind with line anchor:
              ^when\s            # duplication necessary due to limits of regex
            | ^if\s
            | ^elsif\s
            | ^while\s
            | ^unless\s
            )
         )
         \s*((/))(?![*+{}?])
      </string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>string.regexp.classic.ruby</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>regular expressions (normal)
      we only start a regexp if the character before it (excluding whitespace)
      is what we think is before a regexp
      </string>
      <key>contentName</key>
      <string>string.regexp.classic.ruby</string>
      <key>end</key>
      <string>((/[eimnosux]*))</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#regex_sub</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%r\{</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>regular expressions (literal)</string>
      <key>end</key>
      <string>\}[eimnosux]*</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.regexp.mod-r.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#regex_sub</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_curly_r</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%r\[</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>regular expressions (literal)</string>
      <key>end</key>
      <string>\][eimnosux]*</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.regexp.mod-r.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#regex_sub</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_brackets_r</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%r\(</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>regular expressions (literal)</string>
      <key>end</key>
      <string>\)[eimnosux]*</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.regexp.mod-r.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#regex_sub</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_parens_r</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%r\&lt;</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>regular expressions (literal)</string>
      <key>end</key>
      <string>\&gt;[eimnosux]*</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.regexp.mod-r.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#regex_sub</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_ltgt_r</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%r([^\w])</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>regular expressions (literal)</string>
      <key>end</key>
      <string>\1[eimnosux]*</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.regexp.mod-r.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#regex_sub</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%[QWR]?\(</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>literal capable of interpolation ()</string>
      <key>end</key>
      <string>\)</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.quoted.other.literal.upper.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_parens_i</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%[QWR]?\[</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>literal capable of interpolation []</string>
      <key>end</key>
      <string>\]</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.quoted.other.literal.upper.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_brackets_i</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%[QWR]?\&lt;</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>literal capable of interpolation &lt;&gt;</string>
      <key>end</key>
      <string>\&gt;</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.quoted.other.literal.upper.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_ltgt_i</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%[QWR]?\{</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>literal capable of interpolation -- {}</string>
      <key>end</key>
      <string>\}</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.quoted.double.ruby.mod</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_curly_i</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%[QWR]([^\w])</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>literal capable of interpolation -- wildcard</string>
      <key>end</key>
      <string>\1</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.quoted.other.literal.upper.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%([^\w\s=])</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>literal capable of interpolation -- wildcard</string>
      <key>end</key>
      <string>\1</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.quoted.other.literal.other.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%[qws]\(</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>literal incapable of interpolation -- ()</string>
      <key>end</key>
      <string>\)</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.quoted.other.literal.lower.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>\\\)|\\\\</string>
          <key>name</key>
          <string>constant.character.escape.ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_parens</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%[qws]\&lt;</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>literal incapable of interpolation -- &lt;&gt;</string>
      <key>end</key>
      <string>\&gt;</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.quoted.other.literal.lower.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>\\\&gt;|\\\\</string>
          <key>name</key>
          <string>constant.character.escape.ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_ltgt</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%[qws]\[</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>literal incapable of interpolation -- []</string>
      <key>end</key>
      <string>\]</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.quoted.other.literal.lower.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>\\\]|\\\\</string>
          <key>name</key>
          <string>constant.character.escape.ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_brackets</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%[qws]\{</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>literal incapable of interpolation -- {}</string>
      <key>end</key>
      <string>\}</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.quoted.other.literal.lower.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>\\\}|\\\\</string>
          <key>name</key>
          <string>constant.character.escape.ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_curly</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%[qws]([^\w])</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>literal incapable of interpolation -- wildcard</string>
      <key>end</key>
      <string>\1</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.quoted.other.literal.lower.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>comment</key>
          <string>Cant be named because its not neccesarily an escape.</string>
          <key>match</key>
          <string>\\.</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.constant.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>symbols</string>
      <key>match</key>
      <string>(?&lt;!:)(:)(?&gt;[a-zA-Z_]\w*(?&gt;[?!]|=(?![&gt;=]))?|===?|&gt;[&gt;=]?|&lt;[&lt;=]?|&lt;=&gt;|[%&amp;`/\|]|\*\*?|=?~|[-+]@?|\[\]=?|@@?[a-zA-Z_]\w*)</string>
      <key>name</key>
      <string>constant.language.symbol.ruby</string>
    </dict>
    <dict>
      <key>begin</key>
      <string>%I\{</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.constant.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>array of symbols (allow for interpolation)</string>
      <key>end</key>
      <string>\}</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.constant.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>constant.language.symbol.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_curly_i</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%I\(</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.constant.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>array of symbols (allow for interpolation)</string>
      <key>end</key>
      <string>\)</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.constant.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>constant.language.symbol.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_parens_i</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%I\[</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.constant.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>array of symbols (allow for interpolation)</string>
      <key>end</key>
      <string>\]</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.constant.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>constant.language.symbol.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_brackets_i</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%I\&lt;</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.constant.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>array of symbols (allow for interpolation)</string>
      <key>end</key>
      <string>\&gt;</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.constant.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>constant.language.symbol.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_ltgt_i</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%I([^\w])</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.constant.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>array of symbols (allow for interpolation)</string>
      <key>end</key>
      <string>\1</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.constant.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>constant.language.symbol.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%i\(</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.symbol.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>literal incapable of interpolation -- ()</string>
      <key>end</key>
      <string>\)</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.symbol.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>constant.language.symbol.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>\\\)|\\\\</string>
          <key>name</key>
          <string>constant.character.escape.ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_parens</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%i\&lt;</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.symbol.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>literal incapable of interpolation -- &lt;&gt;</string>
      <key>end</key>
      <string>\&gt;</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.symbol.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>constant.language.symbol.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>\\\&gt;|\\\\</string>
          <key>name</key>
          <string>constant.character.escape.ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_ltgt</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%i\[</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.symbol.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>literal incapable of interpolation -- []</string>
      <key>end</key>
      <string>\]</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.symbol.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>constant.language.symbol.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>\\\]|\\\\</string>
          <key>name</key>
          <string>constant.character.escape.ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_brackets</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%i\{</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.symbol.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>literal incapable of interpolation -- {}</string>
      <key>end</key>
      <string>\}</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.symbol.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>constant.language.symbol.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>\\\}|\\\\</string>
          <key>name</key>
          <string>constant.character.escape.ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_curly</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>%i([^\w])</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.symbol.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>array of symbols incapable of interpolation -- wildcard</string>
      <key>end</key>
      <string>\1</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.symbol.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>constant.language.symbol.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>comment</key>
          <string>Cant be named because its not neccesarily an escape.</string>
          <key>match</key>
          <string>\\.</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.constant.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>symbols</string>
      <key>match</key>
      <string>(?&gt;[a-zA-Z_]\w*(?&gt;[?!])?)(:)(?!:)</string>
      <key>name</key>
      <string>constant.language.symbol.ruby.19syntax</string>
    </dict>
    <dict>
      <key>begin</key>
      <string>^=begin</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.comment.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>multiline comments</string>
      <key>end</key>
      <string>^=end</string>
      <key>name</key>
      <string>comment.block.documentation.ruby</string>
    </dict>
    <dict>
      <key>begin</key>
      <string>(^[ \t]+)?(?=#)</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.whitespace.comment.leading.ruby</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(?!\G)</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>#</string>
          <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.comment.ruby</string>
            </dict>
          </dict>
          <key>end</key>
          <string>\n</string>
          <key>name</key>
          <string>comment.line.number-sign.ruby</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>comment</key>
      <string>
      matches questionmark-letters.

      examples (1st alternation = hex):
      ?\x1     ?\x61

      examples (2nd alternation = octal):
      ?\0      ?\07     ?\017

      examples (3rd alternation = escaped):
      ?\n      ?\b

      examples (4th alternation = meta-ctrl):
      ?\C-a    ?\M-a    ?\C-\M-\C-\M-a

      examples (4th alternation = normal):
      ?a       ?A       ?0
      ?*       ?"       ?(
      ?.       ?#


      the negative lookbehind prevents against matching
      p(42.tainted?)
      </string>
      <key>match</key>
      <string>(?&lt;!\w)\?(\\(x\h{1,2}(?!\h)\b|0[0-7]{0,2}(?![0-7])\b|[^x0MC])|(\\[MC]-)+\w|[^\s\\])</string>
      <key>name</key>
      <string>constant.numeric.ruby</string>
    </dict>
    <dict>
      <key>begin</key>
      <string>^__END__\n</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>string.unquoted.program-block.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>__END__ marker</string>
      <key>contentName</key>
      <string>text.plain</string>
      <key>end</key>
      <string>(?=not)impossible</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>(?=&lt;?xml|&lt;(?i:html\b)|!DOCTYPE (?i:html\b))</string>
          <key>end</key>
          <string>(?=not)impossible</string>
          <key>name</key>
          <string>text.html.embedded.ruby</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>text.html.basic</string>
            </dict>
          </array>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?=(?&gt;&lt;&lt;[-~]("?)((?:[_\w]+_|)HTML)\b\1))</string>
      <key>comment</key>
      <string>Heredoc with embedded html</string>
      <key>end</key>
      <string>(?!\G)</string>
      <key>name</key>
      <string>meta.embedded.block.html</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>(?&gt;&lt;&lt;[-~]("?)((?:[_\w]+_|)HTML)\b\1)</string>
          <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.begin.ruby</string>
            </dict>
          </dict>
          <key>contentName</key>
          <string>text.html</string>
          <key>end</key>
          <string>\s*\2$\n?</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.end.ruby</string>
            </dict>
          </dict>
          <key>name</key>
          <string>string.unquoted.heredoc.ruby</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#heredoc</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#interpolated_ruby</string>
            </dict>
            <dict>
              <key>include</key>
              <string>text.html.basic</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#escaped_char</string>
            </dict>
          </array>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?=(?&gt;&lt;&lt;[-~]("?)((?:[_\w]+_|)SQL)\b\1))</string>
      <key>comment</key>
      <string>Heredoc with embedded sql</string>
      <key>end</key>
      <string>(?!\G)</string>
      <key>name</key>
      <string>meta.embedded.block.sql</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>(?&gt;&lt;&lt;[-~]("?)((?:[_\w]+_|)SQL)\b\1)</string>
          <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.begin.ruby</string>
            </dict>
          </dict>
          <key>contentName</key>
          <string>source.sql</string>
          <key>end</key>
          <string>\s*\2$\n?</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.end.ruby</string>
            </dict>
          </dict>
          <key>name</key>
          <string>string.unquoted.heredoc.ruby</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#heredoc</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#interpolated_ruby</string>
            </dict>
            <dict>
              <key>include</key>
              <string>source.sql</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#escaped_char</string>
            </dict>
          </array>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?=(?&gt;&lt;&lt;[-~]("?)((?:[_\w]+_|)CSS)\b\1))</string>
      <key>comment</key>
      <string>Heredoc with embedded css</string>
      <key>end</key>
      <string>(?!\G)</string>
      <key>name</key>
      <string>meta.embedded.block.css</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>(?&gt;&lt;&lt;[-~]("?)((?:[_\w]+_|)CSS)\b\1)</string>
          <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.begin.ruby</string>
            </dict>
          </dict>
          <key>contentName</key>
          <string>source.css</string>
          <key>end</key>
          <string>\s*\2$\n?</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.end.ruby</string>
            </dict>
          </dict>
          <key>name</key>
          <string>string.unquoted.heredoc.ruby</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#heredoc</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#interpolated_ruby</string>
            </dict>
            <dict>
              <key>include</key>
              <string>source.css</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#escaped_char</string>
            </dict>
          </array>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?=(?&gt;&lt;&lt;[-~]("?)((?:[_\w]+_|)CPP)\b\1))</string>
      <key>comment</key>
      <string>Heredoc with embedded c++</string>
      <key>end</key>
      <string>(?!\G)</string>
      <key>name</key>
      <string>meta.embedded.block.c++</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>(?&gt;&lt;&lt;[-~]("?)((?:[_\w]+_|)CPP)\b\1)</string>
          <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.begin.ruby</string>
            </dict>
          </dict>
          <key>contentName</key>
          <string>source.c++</string>
          <key>end</key>
          <string>\s*\2$\n?</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.end.ruby</string>
            </dict>
          </dict>
          <key>name</key>
          <string>string.unquoted.heredoc.ruby</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#heredoc</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#interpolated_ruby</string>
            </dict>
            <dict>
              <key>include</key>
              <string>source.c++</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#escaped_char</string>
            </dict>
          </array>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?=(?&gt;&lt;&lt;[-~]("?)((?:[_\w]+_|)C)\b\1))</string>
      <key>comment</key>
      <string>Heredoc with embedded c</string>
      <key>end</key>
      <string>(?!\G)</string>
      <key>name</key>
      <string>meta.embedded.block.c</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>(?&gt;&lt;&lt;[-~]("?)((?:[_\w]+_|)C)\b\1)</string>
          <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.begin.ruby</string>
            </dict>
          </dict>
          <key>contentName</key>
          <string>source.c</string>
          <key>end</key>
          <string>\s*\2$\n?</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.end.ruby</string>
            </dict>
          </dict>
          <key>name</key>
          <string>string.unquoted.heredoc.ruby</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#heredoc</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#interpolated_ruby</string>
            </dict>
            <dict>
              <key>include</key>
              <string>source.c</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#escaped_char</string>
            </dict>
          </array>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?=(?&gt;&lt;&lt;[-~]("?)((?:[_\w]+_|)(?:JS|JAVASCRIPT))\b\1))</string>
      <key>comment</key>
      <string>Heredoc with embedded javascript</string>
      <key>end</key>
      <string>(?!\G)</string>
      <key>name</key>
      <string>meta.embedded.block.js</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>(?&gt;&lt;&lt;[-~]("?)((?:[_\w]+_|)(?:JS|JAVASCRIPT))\b\1)</string>
          <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.begin.ruby</string>
            </dict>
          </dict>
          <key>contentName</key>
          <string>source.js</string>
          <key>end</key>
          <string>\s*\2$\n?</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.end.ruby</string>
            </dict>
          </dict>
          <key>name</key>
          <string>string.unquoted.heredoc.ruby</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#heredoc</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#interpolated_ruby</string>
            </dict>
            <dict>
              <key>include</key>
              <string>source.js</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#escaped_char</string>
            </dict>
          </array>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?=(?&gt;&lt;&lt;[-~]("?)((?:[_\w]+_|)JQUERY)\b\1))</string>
      <key>comment</key>
      <string>Heredoc with embedded jQuery javascript</string>
      <key>end</key>
      <string>(?!\G)</string>
      <key>name</key>
      <string>meta.embedded.block.js.jquery</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>(?&gt;&lt;&lt;[-~]("?)((?:[_\w]+_|)JQUERY)\b\1)</string>
          <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.begin.ruby</string>
            </dict>
          </dict>
          <key>contentName</key>
          <string>source.js.jquery</string>
          <key>end</key>
          <string>\s*\2$\n?</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.end.ruby</string>
            </dict>
          </dict>
          <key>name</key>
          <string>string.unquoted.heredoc.ruby</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#heredoc</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#interpolated_ruby</string>
            </dict>
            <dict>
              <key>include</key>
              <string>source.js.jquery</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#escaped_char</string>
            </dict>
          </array>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?=(?&gt;&lt;&lt;[-~]("?)((?:[_\w]+_|)(?:SH|SHELL))\b\1))</string>
      <key>comment</key>
      <string>Heredoc with embedded shell</string>
      <key>end</key>
      <string>(?!\G)</string>
      <key>name</key>
      <string>meta.embedded.block.shell</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>(?&gt;&lt;&lt;[-~]("?)((?:[_\w]+_|)(?:SH|SHELL))\b\1)</string>
          <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.begin.ruby</string>
            </dict>
          </dict>
          <key>contentName</key>
          <string>source.shell</string>
          <key>end</key>
          <string>\s*\2$\n?</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.end.ruby</string>
            </dict>
          </dict>
          <key>name</key>
          <string>string.unquoted.heredoc.ruby</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#heredoc</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#interpolated_ruby</string>
            </dict>
            <dict>
              <key>include</key>
              <string>source.shell</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#escaped_char</string>
            </dict>
          </array>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?=(?&gt;&lt;&lt;[-~]("?)((?:[_\w]+_|)LUA)\b\1))</string>
      <key>comment</key>
      <string>Heredoc with embedded lua</string>
      <key>end</key>
      <string>(?!\G)</string>
      <key>name</key>
      <string>meta.embedded.block.lua</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>(?&gt;&lt;&lt;[-~]("?)((?:[_\w]+_|)LUA)\b\1)</string>
          <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.begin.ruby</string>
            </dict>
          </dict>
          <key>contentName</key>
          <string>source.lua</string>
          <key>end</key>
          <string>\s*\2$\n?</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.end.ruby</string>
            </dict>
          </dict>
          <key>name</key>
          <string>string.unquoted.heredoc.ruby</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#heredoc</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#interpolated_ruby</string>
            </dict>
            <dict>
              <key>include</key>
              <string>source.lua</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#escaped_char</string>
            </dict>
          </array>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?=(?&gt;&lt;&lt;[-~]("?)((?:[_\w]+_|)RUBY)\b\1))</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>Heredoc with embedded ruby</string>
      <key>end</key>
      <string>^\1$</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.unquoted.heredoc.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#heredoc</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?&gt;&lt;&lt;[-~](\w+))</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.ruby</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>heredoc with indented terminator</string>
      <key>end</key>
      <string>\s*\1$</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.ruby</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.unquoted.heredoc.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#heredoc</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?&lt;=\{|do|\{\s|do\s)(\|)</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.separator.variable.ruby</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(\|)</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>[_a-zA-Z][_a-zA-Z0-9]*</string>
          <key>name</key>
          <string>variable.other.block.ruby</string>
        </dict>
        <dict>
          <key>match</key>
          <string>,</string>
          <key>name</key>
          <string>punctuation.separator.variable.ruby</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>match</key>
      <string>=&gt;</string>
      <key>name</key>
      <string>punctuation.separator.key-value</string>
    </dict>
    <dict>
      <key>match</key>
      <string>&lt;&lt;=|%=|&amp;=|\*=|\*\*=|\+=|\-=|\^=|\|{1,2}=|&lt;&lt;</string>
      <key>name</key>
      <string>keyword.operator.assignment.augmented.ruby</string>
    </dict>
    <dict>
      <key>match</key>
      <string>&lt;=&gt;|&lt;(?!&lt;|=)|&gt;(?!&lt;|=|&gt;)|&lt;=|&gt;=|===|==|=~|!=|!~|(?&lt;=[ \t])\?</string>
      <key>name</key>
      <string>keyword.operator.comparison.ruby</string>
    </dict>
    <dict>
      <key>match</key>
      <string>(?&lt;=[ \t])!+|\bnot\b|&amp;&amp;|\band\b|\|\||\bor\b|\^</string>
      <key>name</key>
      <string>keyword.operator.logical.ruby</string>
    </dict>
    <dict>
      <key>match</key>
      <string>(%|&amp;|\*\*|\*|\+|\-|/)</string>
      <key>name</key>
      <string>keyword.operator.arithmetic.ruby</string>
    </dict>
    <dict>
      <key>match</key>
      <string>=</string>
      <key>name</key>
      <string>keyword.operator.assignment.ruby</string>
    </dict>
    <dict>
      <key>match</key>
      <string>\||~|&gt;&gt;</string>
      <key>name</key>
      <string>keyword.operator.other.ruby</string>
    </dict>
    <dict>
      <key>match</key>
      <string>\.|::</string>
      <key>name</key>
      <string>punctuation.separator.method.ruby</string>
    </dict>
    <dict>
      <key>match</key>
      <string>:</string>
      <key>name</key>
      <string>punctuation.separator.other.ruby</string>
    </dict>
    <dict>
      <key>match</key>
      <string>\;</string>
      <key>name</key>
      <string>punctuation.separator.statement.ruby</string>
    </dict>
    <dict>
      <key>match</key>
      <string>,</string>
      <key>name</key>
      <string>punctuation.separator.object.ruby</string>
    </dict>
    <dict>
      <key>match</key>
      <string>\{</string>
      <key>name</key>
      <string>punctuation.section.scope.begin.ruby</string>
    </dict>
    <dict>
      <key>match</key>
      <string>\}</string>
      <key>name</key>
      <string>punctuation.section.scope.end.ruby</string>
    </dict>
    <dict>
      <key>match</key>
      <string>\[</string>
      <key>name</key>
      <string>punctuation.section.array.begin.ruby</string>
    </dict>
    <dict>
      <key>match</key>
      <string>\]</string>
      <key>name</key>
      <string>punctuation.section.array.end.ruby</string>
    </dict>
    <dict>
      <key>match</key>
      <string>\(|\)</string>
      <key>name</key>
      <string>punctuation.section.function.ruby</string>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?&lt;=[^\.]\.|::)(?=[a-zA-Z][a-zA-Z0-9_!?]*[^a-zA-Z0-9_!?])</string>
      <key>end</key>
      <string>(?&lt;=[a-zA-Z0-9_!?])(?=[^a-zA-Z0-9_!?])</string>
      <key>name</key>
      <string>meta.function-call.method.without-arguments.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#known_function_names</string>
        </dict>
        <dict>
          <key>match</key>
          <string>([a-zA-Z][a-zA-Z0-9_!?]*)(?=[^a-zA-Z0-9_!?])</string>
          <key>name</key>
          <string>entity.name.function.ruby</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?&lt;=[^\.])(?=(\.|::)[a-zA-Z][a-zA-Z0-9_!?]*\()(\.|::)</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.separator.method.ruby</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(?&lt;=\))</string>
      <key>name</key>
      <string>meta.function-call.method.with-arguments.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#nest_function_parens</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#known_function_names</string>
        </dict>
        <dict>
          <key>match</key>
          <string>([a-zA-Z][a-zA-Z0-9_!?]*)(?=\()</string>
          <key>name</key>
          <string>entity.name.function.ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>$self</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>match</key>
      <string>\b((__(dir)__)|abort|at_exit|binding|block_given[?]|caller|caller_locations|catch|eval|exec|exit[!]?|fail|fork|format|gets|global_variables|iterator[?]|lambda|load|local_variables|loop|open|p|print|printf|proc|putc|puts|raise|rand|readline|readlines|require|require_relative|select|set_trace_func|sleep|spawn|sprintf|srand|syscall|system|test|throw|trace_var|trap|untrace_var|warn)(\b|(?&lt;=[?!(]))(?=\(?)</string>
      <key>name</key>
      <string>support.function.core.ruby</string>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?=[a-zA-Z0-9_!?]+\()</string>
      <key>end</key>
      <string>(?&lt;=\))</string>
      <key>name</key>
      <string>meta.function-call.ruby</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#nest_function_parens</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#known_function_names</string>
        </dict>
        <dict>
          <key>match</key>
          <string>\b([a-z][a-zA-Z0-9_!?]*)\b(?=\()</string>
          <key>name</key>
          <string>entity.name.function.ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>$self</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>include</key>
      <string>#leading-space</string>
    </dict>
    <dict>
      <key>comment</key>
      <string>This is kindof experimental. There really is no way to perfectly match all regular variables, but you can pretty well assume that any normal word in certain curcumstances that havnt already been scoped as something else are probably variables, and the advantages beat the potential errors</string>
      <key>match</key>
      <string>((?&lt;=\W)\b|^)\w+\b(?=\s*([\]\)\}\=\+\-\*\/\^\$\,\.]|&lt;\s|&lt;&lt;[\s|\.]))</string>
      <key>name</key>
      <string>variable.other.ruby</string>
    </dict>
  </array>
  <key>repository</key>
  <dict>
    <key>escaped_char</key>
    <dict>
      <key>match</key>
      <string>\\(?:[0-7]{1,3}|x[\da-fA-F]{1,2}|.)</string>
      <key>name</key>
      <string>constant.character.escape.ruby</string>
    </dict>
    <key>heredoc</key>
    <dict>
      <key>begin</key>
      <string>^&lt;&lt;[-~]?\w+</string>
      <key>end</key>
      <string>$</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>$self</string>
        </dict>
      </array>
    </dict>
    <key>interpolated_ruby</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>#\{</string>
          <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.section.embedded.begin.ruby</string>
            </dict>
          </dict>
          <key>contentName</key>
          <string>source.ruby</string>
          <key>end</key>
          <string>(\})</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.section.embedded.end.ruby</string>
            </dict>
          </dict>
          <key>name</key>
          <string>meta.embedded.line.ruby</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#nest_curly_and_self</string>
            </dict>
            <dict>
              <key>include</key>
              <string>$self</string>
            </dict>
          </array>
        </dict>
        <dict>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.variable.ruby</string>
            </dict>
          </dict>
          <key>match</key>
          <string>(#@)[a-zA-Z_]\w*</string>
          <key>name</key>
          <string>variable.other.readwrite.instance.ruby</string>
        </dict>
        <dict>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.variable.ruby</string>
            </dict>
          </dict>
          <key>match</key>
          <string>(#@@)[a-zA-Z_]\w*</string>
          <key>name</key>
          <string>variable.other.readwrite.class.ruby</string>
        </dict>
        <dict>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.variable.ruby</string>
            </dict>
          </dict>
          <key>match</key>
          <string>(#\$)[a-zA-Z_]\w*</string>
          <key>name</key>
          <string>variable.other.readwrite.global.ruby</string>
        </dict>
      </array>
    </dict>
    <key>nest_brackets</key>
    <dict>
      <key>begin</key>
      <string>\[</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.section.scope.ruby</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\]</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#nest_brackets</string>
        </dict>
      </array>
    </dict>
    <key>nest_brackets_i</key>
    <dict>
      <key>begin</key>
      <string>\[</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.section.scope.ruby</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\]</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_brackets_i</string>
        </dict>
      </array>
    </dict>
    <key>nest_brackets_r</key>
    <dict>
      <key>begin</key>
      <string>\[</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.section.scope.ruby</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\]</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#regex_sub</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_brackets_r</string>
        </dict>
      </array>
    </dict>
    <key>nest_curly</key>
    <dict>
      <key>begin</key>
      <string>\{</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.section.scope.ruby</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\}</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#nest_curly</string>
        </dict>
      </array>
    </dict>
    <key>nest_curly_and_self</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>\{</string>
          <key>captures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.section.scope.ruby</string>
            </dict>
          </dict>
          <key>end</key>
          <string>\}</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#nest_curly_and_self</string>
            </dict>
          </array>
        </dict>
        <dict>
          <key>include</key>
          <string>$self</string>
        </dict>
      </array>
    </dict>
    <key>nest_curly_i</key>
    <dict>
      <key>begin</key>
      <string>\{</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.section.scope.ruby</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\}</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_curly_i</string>
        </dict>
      </array>
    </dict>
    <key>nest_curly_r</key>
    <dict>
      <key>begin</key>
      <string>\{</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.section.scope.ruby</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\}</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#regex_sub</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_curly_r</string>
        </dict>
      </array>
    </dict>
    <key>nest_ltgt</key>
    <dict>
      <key>begin</key>
      <string>\&lt;</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.section.scope.ruby</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\&gt;</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#nest_ltgt</string>
        </dict>
      </array>
    </dict>
    <key>nest_ltgt_i</key>
    <dict>
      <key>begin</key>
      <string>\&lt;</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.section.scope.ruby</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\&gt;</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_ltgt_i</string>
        </dict>
      </array>
    </dict>
    <key>nest_ltgt_r</key>
    <dict>
      <key>begin</key>
      <string>\&lt;</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.section.scope.ruby</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\&gt;</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#regex_sub</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_ltgt_r</string>
        </dict>
      </array>
    </dict>
    <key>nest_parens</key>
    <dict>
      <key>begin</key>
      <string>\(</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.section.scope.ruby</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\)</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#nest_parens</string>
        </dict>
      </array>
    </dict>
    <key>nest_parens_i</key>
    <dict>
      <key>begin</key>
      <string>\(</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.section.scope.ruby</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\)</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_parens_i</string>
        </dict>
      </array>
    </dict>
    <key>nest_parens_r</key>
    <dict>
      <key>begin</key>
      <string>\(</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.section.scope.ruby</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\)</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#regex_sub</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nest_parens_r</string>
        </dict>
      </array>
    </dict>
    <key>regex_sub</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolated_ruby</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.arbitrary-repitition.ruby</string>
            </dict>
            <key>3</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.arbitrary-repitition.ruby</string>
            </dict>
          </dict>
          <key>match</key>
          <string>(\{)\d+(,\d+)?(\})</string>
          <key>name</key>
          <string>string.regexp.arbitrary-repitition.ruby</string>
        </dict>
        <dict>
          <key>begin</key>
          <string>\[(?:\^?\])?</string>
          <key>captures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.character-class.ruby</string>
            </dict>
          </dict>
          <key>end</key>
          <string>\]</string>
          <key>name</key>
          <string>string.regexp.character-class.ruby</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#escaped_char</string>
            </dict>
          </array>
        </dict>
        <dict>
          <key>begin</key>
          <string>\(</string>
          <key>captures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.group.ruby</string>
            </dict>
          </dict>
          <key>end</key>
          <string>\)</string>
          <key>name</key>
          <string>string.regexp.group.ruby</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#regex_sub</string>
            </dict>
          </array>
        </dict>
        <dict>
          <key>begin</key>
          <string>(?&lt;=^|\s)(#)\s(?=[[a-zA-Z0-9,. \t?!-][^\x{00}-\x{7F}]]*$)</string>
          <key>beginCaptures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.comment.ruby</string>
            </dict>
          </dict>
          <key>comment</key>
          <string>We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags.</string>
          <key>end</key>
          <string>$\n?</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.comment.ruby</string>
            </dict>
          </dict>
          <key>name</key>
          <string>comment.line.number-sign.ruby</string>
        </dict>
      </array>
    </dict>
    <key>known_function_names</key>
    <dict>
      <key>match</key>
      <string>\b(abs|abs2|all[?]|allocate|ancestors|angle|any[?]|append|arg|arity|ascii_only[?]|assoc|at|autoload[?]?|b|between[?]|binding|bit_length|bsearch|bsearch_index|bytes|bytesize|byteslice|call|capitalize[!]?|casecmp[?]?|ceil|center|chars|chomp[!]?|chop[!]?|chr|chunk|chunk_while|clamp|class|class_eval|class_exec|class_variable_defined[?]|class_variable_get|class_variable_set|class_variables|clear|clone|codepoints|coerce|collect[!]?|collect_concat|combination|compact[!]?|compare_by_identity[?]?|concat|conj|conjugate|const_defined[?]|const_get|const_missing|const_set|constants|count|crypt|curry|cycle|default|default=|default_proc|default_proc=|define_singleton_method|delete[!]?|delete_at|delete_if|delete_prefix[!]?|delete_suffix[!]?|denominator|deprecate_constant|detect|dig|digits|display|div|divmod|downcase[!]?|downto|drop|drop_while|dump|dup|each|each_byte|each_char|each_codepoint|each_cons|each_entry|each_grapheme_cluster|each_index|each_key|each_line|each_pair|each_slice|each_value|each_with_index|each_with_object|empty[?]|encode[!]?|encoding|end_with[?]|entries|enum_for|eql[?]|equal[?]|even[?]|extend|fdiv|feed|fetch|fetch_values|fill|find|find_all|find_index|finite[?]|first|flat_map|flatten[!]?|floor|force_encoding|freeze|frozen[?]|gcd|gcdlcm|getbyte|grapheme_clusters|grep|grep_v|group_by|gsub[!]?|has_key[?]|has_value[?]|hash|hex|i|id2name|imag|imaginary|include[?]?|included_modules|index|infinite[?]|inject|insert|inspect|instance_eval|instance_exec|instance_method|instance_methods|instance_of[?]|instance_variable_defined[?]|instance_variable_get|instance_variable_set|instance_variables|integer[?]|intern|invert|is_a[?]|itself|join|keep_if|key[?]?|keys|kind_of[?]|lambda[?]|last|lazy|lcm|length|lines|ljust|lstrip[!]?|magnitude|map[!]?|match[?]?|max|max_by|member[?]|merge[!]?|method|method_defined[?]|methods|min|min_by|minmax|minmax_by|module_eval|module_exec|modulo|name|nan[?]|negative[?]|new|next[!]?|next_float|next_values|nil[?]|none[?]|nonzero[?]|numerator|object_id|oct|odd[?]|one[?]|ord|original_name|owner|pack|parameters|partition|peek|peek_values|permutation|phase|polar|pop|positive[?]|pred|prepend|prev_float|private_class_method|private_constant|private_instance_methods|private_method_defined[?]|private_methods|product|protected_instance_methods|protected_method_defined[?]|protected_methods|public_class_method|public_constant|public_instance_method|public_instance_methods|public_method|public_method_defined[?]|public_methods|public_send|push|quo|rassoc|rationalize|real[?]?|receiver|rect|rectangular|reduce|rehash|reject[!]?|remainder|remove_class_variable|remove_instance_variable|repeated_combination|repeated_permutation|replace|respond_to[?]|reverse[!]?|reverse_each|rewind|rindex|rjust|rotate[!]?|round|rpartition|rstrip[!]?|sample|scan|scrub[!]?|select[!]?|send|setbyte|shift|shuffle[!]?|singleton_class[?]?|singleton_method|singleton_method_added|singleton_methods|size|slice[!]?|slice_after|slice_before|slice_when|sort[!]?|sort_by[!]?|source_location|split|squeeze[!]?|start_with[?]|step|store|strip[!]?|sub[!]?|succ[!]?|sum|super_method|superclass|swapcase[!]?|taint|tainted[?]|take|take_while|tap|times|to_a|to_ary|to_c|to_enum|to_f|to_h|to_hash|to_i|to_int|to_proc|to_r|to_s|to_str|to_sym|tr[!]?|tr_s[!]?|transform_keys[!]?|transform_values[!]?|transpose|truncate|trust|unbind|unicode_normalize[!]?|unicode_normalized[?]|uniq[!]?|unpack|unpack1|unshift|untaint|untrust|untrusted[?]|upcase[!]?|update|upto|valid_encoding[?]|value[?]|values|values_at|with_index|with_object|yield|yield_self|zero[?]|zip)(\b|(?&lt;=[?!]))</string>
      <key>name</key>
      <string>support.function.core.ruby</string>
    </dict>
    <key>leading-space</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>^(?=(\t|  ))</string>
          <key>end</key>
          <string>(?=[^\t\s]|\n)</string>
          <key>name</key>
          <string>meta.leading-tabs</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>captures</key>
              <dict>
                <key>1</key>
                <dict>
                  <key>name</key>
                  <string>meta.odd-tab.group1.spaces</string>
                </dict>
                <key>10</key>
                <dict>
                  <key>name</key>
                  <string>meta.even-tab.group10.spaces</string>
                </dict>
                <key>11</key>
                <dict>
                  <key>name</key>
                  <string>meta.odd-tab.group11.spaces</string>
                </dict>
                <key>2</key>
                <dict>
                  <key>name</key>
                  <string>meta.even-tab.group2.spaces</string>
                </dict>
                <key>3</key>
                <dict>
                  <key>name</key>
                  <string>meta.odd-tab.group3.spaces</string>
                </dict>
                <key>4</key>
                <dict>
                  <key>name</key>
                  <string>meta.even-tab.group4.spaces</string>
                </dict>
                <key>5</key>
                <dict>
                  <key>name</key>
                  <string>meta.odd-tab.group5.spaces</string>
                </dict>
                <key>6</key>
                <dict>
                  <key>name</key>
                  <string>meta.even-tab.group6.spaces</string>
                </dict>
                <key>7</key>
                <dict>
                  <key>name</key>
                  <string>meta.odd-tab.group7.spaces</string>
                </dict>
                <key>8</key>
                <dict>
                  <key>name</key>
                  <string>meta.even-tab.group8.spaces</string>
                </dict>
                <key>9</key>
                <dict>
                  <key>name</key>
                  <string>meta.odd-tab.group9.spaces</string>
                </dict>
              </dict>
              <key>match</key>
              <string>(  )(  )?(  )?(  )?(  )?(  )?(  )?(  )?(  )?(  )?(  )?</string>
            </dict>
            <dict>
              <key>captures</key>
              <dict>
                <key>1</key>
                <dict>
                  <key>name</key>
                  <string>meta.odd-tab.group1.tab</string>
                </dict>
                <key>10</key>
                <dict>
                  <key>name</key>
                  <string>meta.even-tab.group10.tab</string>
                </dict>
                <key>11</key>
                <dict>
                  <key>name</key>
                  <string>meta.odd-tab.group11.tab</string>
                </dict>
                <key>2</key>
                <dict>
                  <key>name</key>
                  <string>meta.even-tab.group2.tab</string>
                </dict>
                <key>3</key>
                <dict>
                  <key>name</key>
                  <string>meta.odd-tab.group3.tab</string>
                </dict>
                <key>4</key>
                <dict>
                  <key>name</key>
                  <string>meta.even-tab.group4.tab</string>
                </dict>
                <key>5</key>
                <dict>
                  <key>name</key>
                  <string>meta.odd-tab.group5.tab</string>
                </dict>
                <key>6</key>
                <dict>
                  <key>name</key>
                  <string>meta.even-tab.group6.tab</string>
                </dict>
                <key>7</key>
                <dict>
                  <key>name</key>
                  <string>meta.odd-tab.group7.tab</string>
                </dict>
                <key>8</key>
                <dict>
                  <key>name</key>
                  <string>meta.even-tab.group8.tab</string>
                </dict>
                <key>9</key>
                <dict>
                  <key>name</key>
                  <string>meta.odd-tab.group9.tab</string>
                </dict>
              </dict>
              <key>match</key>
              <string>(\t)(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?</string>
            </dict>
          </array>
        </dict>
      </array>
    </dict>
    <key>nest_function_parens</key>
    <dict>
      <key>begin</key>
      <string>\(</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.section.scope.ruby</string>
        </dict>
      </dict>
      <key>contentName</key>
      <string>meta.section.scope.ruby</string>
      <key>end</key>
      <string>\)</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#nest_function_parens</string>
        </dict>
        <dict>
          <key>include</key>
          <string>$self</string>
        </dict>
      </array>
    </dict>
  </dict>
  <key>scopeName</key>
  <string>source.ruby</string>
  <key>uuid</key>
  <string>E00B62AC-6B1C-11D9-9B1F-000D93589AF6</string>
</dict>
</plist>
